#!/usr/bin/perl

use strict;
use warnings;
use feature qw( :5.10 );

BEGIN {
  eval qq{
    use Javascript::Closure qw(minify :CONSTANTS);
    use JSON::XS qw( decode_json );
    use YAML ();
  };
  if($@)
  {
    warn "this program requires these perl modules to be installed:\n";
    warn "  Javascript::Closure\n";
    warn "  JSON::XS\n";
    warn "  YAML\n";
    exit 2;
  }
}

use NX::Nebraska;
use Getopt::Long;

my $home = NX::Nebraska->config->{home};
my $root = NX::Nebraska->config->{root};
my $yaml = 0;
my $no_code = 0;
my $quiet = 0;

my $ret = GetOptions (
  "home=s" => \$home,
  "root=s" => \$root,
  "yaml" => \$yaml,
  "no-code" => \$no_code,
  "quiet" => \$quiet,
);

unless($ret)
{
  warn "usage: nx_nebraska_jspack [ -home home ] [ -root root ] [ -yaml ] [ -no-code ]\n";
  exit 2;
}

my %c = (
  'NX::Nebraska::Controller::Compare' => 'compare',
  'NX::Nebraska::Controller::Trip' => 'trip',
);

my $license = '';

if(-r "$home/LICENSE")
{
  open(IN, "$home/LICENSE");
  $license = "/*\n * " . join(" * ", <IN>) . " */\n";
}
else
{
  warn "NO LICENSE FILE!\n";
}

my $exit = 0;

while(my($mod,$name) = each %c)
{
  eval "use $mod";
  die $@ if $@;
  
  warn "compiling $mod => $name-$NX::Nebraska::VERSION.js\n";
  
  my @fn = map { $root . $_ } @{ $mod->JS };

  my @js;

  foreach my $fn (@fn)
  {
    open(IN, $fn) || die "unable to read $fn $!";
    push @js, do { local $/; <IN> };
    close IN;
  }

  my $r = decode_json(minify(
    input             => \@js,
    output_format     => JSON,
    output_info       => [STATISTICS,WARNINGS,ERRORS,COMPILED_CODE],
    compilation_level => SIMPLE_OPTIMIZATIONS,
    warning_level     => VERBOSE,
  ));
      
  if($r->{warnings})
  {
    foreach my $warning (@{ $r->{warnings} })
    {
      diag($warning, \@fn);
    }
    warn "\n", int(@{ $r->{warnings} }), " warnings\n";
  }
  else
  {
    warn "\nno warnings\n";
  }
  
  if($r->{errors})
  {
    foreach my $error (@{ $r->{errors} })
    {
      diag($error, \@fn);
    }
    warn "\n", int(@{ $r->{errors} }), " errors\n";
    $exit = 1;
    next;
  }
  else
  {
    warn "\nno errors\n";
  }

  if($yaml)
  {
    use YAML ();
    open(OUT, ">$root/js/compare-$NX::Nebraska::VERSION.yml") || die "unable to write $root/js/compare-$NX::Nebraska::VERSION.yml $!";
    print OUT YAML::Dump($r);
    close OUT;
  }

  if(!$no_code)
  {
    open(OUT, ">$root/js/compare-$NX::Nebraska::VERSION.js") || die "unable to write $root/js/compare-$NX::Nebraska::VERSION.js $!";
    print OUT $license;
    print OUT $r->{compiledCode};
    close OUT;
  }
}

exit $exit;

sub diag
{
  my $error = shift;
  my $fn = shift;

  if($error->{file} =~ /^Input_(\d+)$/)
  {
    $error->{file} = $fn->[$1];
  }
  
  my $type;
  if(defined $error->{error})
  {
    $type = 'error';
  }
  else
  {
    $type = 'warning';
    return if $quiet;
  }
  
  my $message = $error->{error} // $error->{warning};
  
  warn "\n";
  if(ref $message)
  {
    warn YAML::Dump({ $type => $message });
  }
  else
  {
    warn $type, ':    ', $message, "\n";
  }
  warn 'location: ', $error->{file}, ':', $error->{lineno}, '.', $error->{charno}, "\n";
}
